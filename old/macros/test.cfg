################################################################################
# NOTIFY
# Prints text to the display and as printer response at the same time
################################################################################
[gcode_macro MESSAGE]
description: Responds both in screen and in console
gcode:
    { action_respond_info(params.MSG) }
    M117 {params.MSG}


######################################################################
# Test
######################################################################
[gcode_macro FIRST_LAYER_CALIBRATION]
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER | float %}
    {% set BED_TEMP = params.BED| float %}

    M23 kalibreerimine/firstlayer.gcode
    PRINT_START EXTRUDER={ EXTRUDER_TEMP } BED={ BED_TEMP }
    M24

######################################################################
# Test
######################################################################
[gcode_macro _raoul]
#default_parameter_EXTRUDER: 200
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin <CENTER><P><B>STEP 3/3</B></P><B>Wipe nozzle clean, then click NEXT to resume print or click BACK to unload again and return to step 2"
    RESPOND TYPE=command MSG="action:prompt_choice NEXT"
    RESPOND TYPE=command MSG="action:prompt_choice BACK"
    RESPOND TYPE=command MSG="action:prompt_choice EXTRACT 5 mm"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro TP]
gcode:
#    {% toolhead = self.printer.lookup_object('toolhead') %}
#    {% print_time = printer.toolhead.get_last_move_time() %}
#    {% res = mcu_probe.query_endstop(print_time) %}
    ;M118 kontroll
    QUERY_PROBE
    _WAIT_FOR_STOW_PROBE
    ;M118 {printer.probe.last_query}

[delayed_gcode test_probe]
gcode:
  TP

################################################################################
# _WAIT_FOR_STOW_PROBE 
# Makro, mis kontrollib printeri probe staatust enne printimise algust.

# Point on selles, et olen korduvalt kriipinud printeri plaati, sest
# probe on j채채nud sisse.
################################################################################
[gcode_macro _WAIT_FOR_STOW_PROBE]
gcode: 
    ; Mingil p6hjusel on vaja kaks korda kysida
    ;QUERY_PROBE     ;mis asendis probe on
    ;QUERY_PROBE     ;mis asendis probe on
    ; Kui on laadimata
    {% if printer.probe.last_query==0 %}
        ;M118 {printer.probe.last_query}
        M300
        M118 "Palun t6sta probe yles"
        M117 PROBE!!!
        {action_respond_info("Palun t6sta probe yles!")}
        UPDATE_DELAYED_GCODE ID=test_probe DURATION=3
    {% else %}
        ;M118 {printer.probe.last_query}
        M118 "K6ik on OK"
        M117
    {% endif %}

################################################################################
# M876
# Handles prompt response (to communicate with Klipper)

# Point on selles, et olen korduvalt kriipinud printeri plaati, sest
# probe on j채채nud sisse.
################################################################################
[gcode_macro M876]
variable_myjob: 0
gcode:
	{% set S = params.S|default(-1)|int %}
	{% set myjob = printer["gcode_macro _STATE_MACHINE"].job %}
	{% if  myjob != 0 %}
		
		# Previous
		{% if S == 1 %} 
		    {% set myjob = myjob - 1 %}	
		
		# Next
        {% elif S == 2%}
		    {% set myjob = myjob + 1 %}	
        
		# Skip
        {% elif S == 3%}
		    {% set myjob = myjob + 2 %}	
        
        # _OK
        {% elif S == 4%}
		    {% set myjob = myjob + 1 %}	

        # Cancel
        {% else %}
		    {% set myjob = 0 %}	
        {% endif %}
          
	{% endif %}
	
    #RESPOND TYPE=echo MSG="Nyyd: {myjob} "
    _STATE_MACHINE NEWJOB={myjob}

################################################################################
# M876 Buttons
# Handles movement between steps
################################################################################
[gcode_macro _PREVIOUS]
gcode:
     M876 S1 
[gcode_macro NEXT]
gcode:
     M876 S2
[gcode_macro _SKIP]
gcode:
     M876 S3
[gcode_macro _OK]
gcode:
     #{ action_respond_info("The mesh will not be rebuilt unless it does not exist")}
     M876 S4
[gcode_macro _CANCEL]
gcode:
     M876 S5

################################################################################
# _STATE_MACHINE
# Handles jobs that require step-by-step approach
################################################################################
[gcode_macro _STATE_MACHINE]
variable_job: 0
variable_myjob: 0
gcode:
   
    # Set a job status to the entered number
	{% set myjob = params.NEWJOB|default(0)|int %}

    # RESPOND TYPE=echo MSG="Job: {myjob} "
	# Continue only if myjob is not zero. Otherwise stop processing state machine
	{% if myjob != 0 %}

        # START PRINTING STATE MACHINE


        # CHANGE FILAMENT STATE MACHINE


        # CALIBRATE PRINTER STATE MACHINE

    	RESPOND TYPE=command MSG="========================================"
	    RESPOND TYPE=command MSG="| CANCEL - PREVIOUS - NEXT - SKIP - OK |"
    	RESPOND TYPE=command MSG="| Please choose a next step:           |"
    	RESPOND TYPE=command MSG="========================================"
    {% else %}
        # Job is canceled
        RESPOND TYPE=error MSG="Process canceled."
	{% endif %}

    # My console is running backwards therefore it has to be here 
    RESPOND TYPE=echo MSG="Job: {myjob} "
	
    # We need to share the state with other commands
    SET_GCODE_VARIABLE MACRO=_STATE_MACHINE VARIABLE=job VALUE={myjob}

[gcode_macro test_pause]
gcode:
    ##### set defaults #####
    {% set x = params.X|default(0) %}      #edit to your park position
    {% set y = params.Y|default(-115) %}      #edit to your park position
    {% set z = params.Z|default(280)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < lift_z %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z %}
        {% set x = 0 %}
        {% set y = 0 %}
    {% endif %}

    RESPOND TYPE=command MSG="Z:Safe {z_safe}"
    RESPOND TYPE=command MSG="x {x}"
    RESPOND TYPE=command MSG="y {y}"
    RESPOND TYPE=command MSG="z {z}"
