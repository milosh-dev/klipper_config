################################################################################
# ~~~~~~~~~~~~~~~~~~~~~~~~  AUTOCREATED WITH KIAUH  ~~~~~~~~~~~~~~~~~~~~~~~~~~ #
################################################################################
# Recommended macros and config entries if you use Mainsail or Fluidd!         #
# You can edit or delete those macros if you already defined them elsewhere!   #
################################################################################

[pause_resume]
# 
#[display_status]

################################################################################
# CANCEL_PRINT 
# AUTOCREATED WITH KIAUH
# Handles print canceling
################################################################################
[gcode_macro CANCEL_PRINT]
description: Handles canceling of print job
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    KOJU

################################################################################
# PAUSE
# AUTOCREATED WITH KIAUH
# Pauses printing
################################################################################
[gcode_macro PAUSE]
description: Pauses printing. Optionally set retraction length PAUSE E=5
rename_existing: BASE_PAUSE
gcode:
    ##### set defaults #####
    #{% set x = params.X|default(230) %}      #edit to your park position
    #{% set y = params.Y|default(230) %}      #edit to your park position
    #{% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    #{% set max_z = printer.toolhead.axis_maximum.z|float %}
    #{% set act_z = printer.toolhead.position.z|float %}
    #{% set lift_z = z|abs %}
    #{% if act_z < (max_z - lift_z) %}
    #    {% set z_safe = lift_z %}
    #{% else %}
    #    {% set z_safe = max_z - act_z %}
    #{% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    {% if e > 0 %}
        G91                     # Relative mode
        G1 E-{e} F2100          # Retract
        G90                     # Absolute mode
    {% endif %}
    KOJU                    # Move to home
    # G1 Z{z_safe}
    # G1 X{x} Y{y} F6000

################################################################################
# RESUME
# AUTOCREATED WITH KIAUH
# Resumes printing after pause
################################################################################
[gcode_macro RESUME]
description: Resumes printing after pause. Optionally set extrusion length RESUME E=5
rename_existing: BASE_RESUME
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    {% if e > 0 %}
        G91                     # Relative mode
        G1 E{e} F2100           # Extrude
        G90                     # Absolute mode
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

################################################################################
# START_PRINT
# General print start macro
################################################################################
[gcode_macro START_PRINT]
description: Starts printing
variable_radius: 0
variable_bed: 0
variable_extruder: 0
variable_x: 0
variable_y: 0
gcode:
    # Set temperatures
    {% set bed = params.BED|default(60)|float %} #Bed temperature
    {% set extruder = params.EXTRUDER|default(200)|float %} #Extruder temperature

    # Set radius from parameters or from configuration
    {% set radius = params.R|default(printer.configfile.settings.bed_mesh.mesh_radius)|float %} #edit to your retract length%

    # Set mesh coordinates
    {% set x = params.X|default(0)|float %}    
    {% set y = params.Y|default(0)|float %}    
    
    # Don't exceed calibrated radius - not needed, as we cannot be outside printable radius anyway
    # {% if radius > printer.configfile.settings.bed_mesh.mesh_radius %}
    #    {% set radius = printer.configfile.settings.bed_mesh.mesh_radius %}
    # {% endif %}
    
    # We need to share the radius with other commands
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=radius VALUE={radius}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=x VALUE={x}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=y VALUE={y}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed VALUE={bed}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder VALUE={extruder}
    
    # Preparations
    CLEAR_PAUSE                     # Clear existing pause
    # SET_GCODE_OFFSET Z=0.0          # Reset Z offset
    # BED_MESH_PROFILE LOAD=default   # Load Bed Mesh
    
    G28                             # Move home
    G90                             # Absolute positioning
    
    # Calibrate Mesh
    # Set pause for printing, as we start to probe mesh, etc.
    PAUSE
    STATE_MACHINE NEWJOB=100
    
    #G1 X0 Y124 Z10 F6000            # Move to outer edge for heat up
    
    # Heat up
    #M140 S{bed}                     # Set bed temperature
    #M104 S{extruder}                # Set hotend temperature
    #M105                            # Report temperatures
    #M190 S{bed}                     # Wait for bed temperature
    #M109 S{extruder}                # Wait for hotend temperature
    
    # Wipe
    # G1 X0 Y124 Z0.2 F6000
    # G2 X124 Y0 Z0.2 E40 I0 J-124 F500
 
    #G92 E0                          # Zero the extruder
    
################################################################################
# MENU
# Resumes printing after pause
################################################################################


### menu octoprint ###
[menu __main __octoprint]
type: list
enable: {printer.idle_timeout.state == "Printing" or printer.print_stats.state == "paused"}
name: Printing

[menu __main __octoprint __pause]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Pause printing
gcode:
    #{action_respond_info('action:pause')}
    PAUSE

[menu __main __octoprint __resume]
type: command
enable: {printer.print_stats.state == "paused"}
name: Resume printing
gcode:
    #{action_respond_info('action:resume')}
    RESUME

[menu __main __octoprint __abort]
type: command
enable: {printer.idle_timeout.state == "Printing"}
name: Cancel printing
gcode:
    #{action_respond_info('action:cancel')}
    CANCEL_PRINT

### menu virtual sdcard ###
[menu __main __sdcard]
type: vsdlist
enable: {('virtual_sdcard' in printer)}
name: Files
