############################################
# My printer macros
# Raoul Lattemae
# 
# Based on:
#   https://www.reddit.com/r/klippers/comments/m57iai/mom_my_overpowered_m600_command/
#   kiauh_macros.cfg
# 
# v1.0 - 10.04.2022
############################################

# Optional configuration items
[gcode_arcs]            # Enable G1 and G2 arc
[pause_resume]
# The following commands are available when the pause_resume config section is enabled:
# PAUSE¶
# 
# PAUSE: Pauses the current print. The current position is captured for restoration upon resume.
# RESUME¶
# 
# RESUME [VELOCITY=<value>]: Resumes the print from a pause, first restoring the previously captured position. 
# The VELOCITY parameter determines the speed at which the tool should return to the original captured position.
# CLEAR_PAUSE¶
# 
# CLEAR_PAUSE: Clears the current paused state without resuming the print. This is useful if one decides to cancel 
# a print after a PAUSE. It is recommended to add this to your start gcode to make sure the paused state is fresh for each print.
# CANCEL_PRINT¶
# 
# CANCEL_PRINT: Cancels the current print.

# MACROS
[include state_machine.cfg]             # State Machine
[include printing.cfg]                  # Printing related macros
[include filament.cfg]                  # Filament related macros

[include configuration.cfg]             # Configuration macros
[include calibration.cfg]               # Printer calibration macros

[include fast_infill.cfg]               # Fast infill
[include speed_test.cfg]

# [include test.cfg]
# [include my_macros.cfg]
# [include off/kiauh_macros.cfg]
# [include off/mom.cfg]

##################################################
# Lisamakrod
# https://www.lpomykal.cz/anycubic-kossel-klipper-macros/
##################################################
# Lukas Pomykal Klipper macros
# For more informations visit: lpomykal.cz
# Copy these macros into your printer.cfg Klipper file.


########################################
# System Macros
########################################

#[gcode_macro m205]
#gcode:
#  G4
  
#[gcode_macro m108]
#gcode:
#  G4  

[output_pin BEEPER_pin]
pin: PC0 # ar37
#   Beeper pin. This parameter must be provided.
#   ar37 is the default RAMPS/MKS pin.
pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.

[gcode_macro M300]
#default_parameter_S=1000
#default_parameter_P=100
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0


########################################
# Home and Calibrating Macros
########################################
[gcode_macro KOJU]
description: Goes home and then reduces head 2mm
gcode:  G28                     # Home
        G91                     # Relative move
        G1 X0 Y0 Z-2 F 3000     # Move 2 mm below     
        M300                    # Play Tone
        G90                     # Restore absolute movement

[gcode_macro LAZY_HOME]
description: Goes to home unless printer is already in homed state
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    KOJU
  {% endif %}

################################################################################
# NOTIFY
# Prints text to the display and as printer response at the same time
################################################################################
[gcode_macro NOTIFY]
description: Responds both in screen and in console
gcode:
    { action_respond_info(params.MSG) }
    M117 {params.MSG}


[menu __calibration_test]
type: command
name: Koju
gcode:
        KOJU

[gcode_macro SEARCH_VARS]
# 
# SEARCH_VARS
# 
# Dump the printer object so you can find variables of interest
# 
description: Dump the printer object to the console
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}



[menu __main __calibration]
type: list
name: Calibration

[menu __main __calibration __accept]
type: command
name: Accept
gcode:
        ACCEPT

[menu __main __calibration __abort]
type: command
name: Abort
gcode:
        ABORT
#action: back

[menu __main __calibration __probe_accuracy]
type: command
name: Test accuracy
gcode:
    G28
    PROBE_ACCURACY

[menu __main __calibration __save_config]
type: command
name: Save config
gcode:
        SAVE_CONFIG

[menu __main __calibration __probe_calibrate]
type: command
name: Adjust Z offset
gcode:
    G28
    PROBE_CALIBRATE

[menu __main __calibration __toolhead_zpos]
type: input
name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input: 6
input_min: 0
input_max: 11
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
    {%- endif -%}

[menu __main __calibration __probe_calibrate_testz_minus]
#cursor: \x20
type: command
#width: 7
name: "   -"
gcode:
        TESTZ Z=-

[menu __main __calibration __probe_calibrate_testz_plus]
#cursor: \x20
type: command
name: "   +"
#width: 7
gcode:
        TESTZ Z=+

[menu __main __calibration __probe_calibrate_testz_minus_minus]
#cursor: \x20
type: command
name: "   --"
#width: 7
gcode:
        TESTZ Z=--

[menu __main __calibration __probe_calibrate_testz_plus_plus]
#cursor: \x20
type: command
name: "   ++"
#width: 7
gcode:
        TESTZ Z=++

[menu __main __calibration __probe_calibrate_testz_minus_1]
#cursor: \x20
type: command
name: "  -1.0"
#width: 7
gcode:
        TESTZ Z=-1

[menu __main __calibration __probe_calibrate_testz_plus_1]
#cursor: \x20
type: command
name: "  +1.0"
#width: 7
gcode:
        TESTZ Z=+1

[menu __main __calibration __probe_calibrate_testz_minus_point_1]
#cursor: \x20
type: command
name: "  -0.1"
#width: 7
gcode:
        TESTZ Z=-0.1

[menu __main __calibration __probe_calibrate_testz_plus_point_1]
#cursor: \x20
type: command
name: "  +0.1"
#width: 7
gcode:
        TESTZ Z=+0.1